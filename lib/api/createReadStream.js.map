{"version":3,"sources":["src/createReadStream.js"],"names":[],"mappings":"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","file":"createReadStream.js","sourcesContent":["import Bigint from '../tools/bigint'\r\nimport Bluebird from 'bluebird'\r\nimport {Readable} from 'stream'\r\nimport {request} from '../tools/smb2-forge'\r\n\r\nconst requestAsync = Bluebird.promisify(request)\r\n\r\nconst maxPacketSize = 0x00010000\r\n\r\nclass SmbReadableStream extends Readable {\r\n  constructor (connection, file, options = {}) {\r\n    super(options)\r\n\r\n    const {\r\n      start = 0,\r\n      end,\r\n      encoding\r\n    } = options\r\n\r\n    this.connection = connection\r\n    this.encoding = encoding\r\n    this.file = file\r\n    this.offset = new Bigint(8, start)\r\n\r\n    let fileLength = 0\r\n    for (let i = 0; i < file.EndofFile.length; i++) {\r\n      fileLength |= file.EndofFile[i] << (i * 8)\r\n    }\r\n    this.fileLength = fileLength\r\n    this.wait = false\r\n\r\n    if (end >= 0 && end < fileLength) {\r\n      this.fileLength = end + 1\r\n    }\r\n  }\r\n\r\n  async _read (size) {\r\n    while (this.offset.lt(this.fileLength)/* && size > 0*/) {\r\n      if (this.wait) {\r\n        return\r\n      }\r\n      const rest = this.offset.sub(this.fileLength).neg()\r\n      const packetSize = Math.min(maxPacketSize, rest.toNumber()/*, size*/)\r\n\r\n      const offset = new Bigint(this.offset)\r\n      this.wait = true\r\n      let content = await requestAsync('read', {\r\n        FileId: this.file.FileId,\r\n        Length: packetSize,\r\n        Offset: offset.toBuffer()\r\n      }, this.connection)\r\n      this.wait = false\r\n\r\n      if (this.encoding) {\r\n        content = content.toString(this.encoding)\r\n      }\r\n      this.offset = this.offset.add(packetSize)\r\n      // size -= packetSize\r\n      if (!this.push(content)) {\r\n        return\r\n      }\r\n    }\r\n    if (this.offset.ge(this.fileLength)) {\r\n      this.push(null)\r\n      await requestAsync('close', this.file, this.connection)\r\n    }\r\n  }\r\n}\r\n\r\nexport default function (path, options, cb) {\r\n  if (typeof options === 'function') {\r\n    cb = options\r\n    options = {}\r\n  }\r\n  request('open', {path}, this, (err, file) => {\r\n    if (err) {\r\n      if (err.code === 'STATUS_OBJECT_NAME_NOT_FOUND') {\r\n        err.code = 'ENOENT'\r\n      }\r\n      cb(err)\r\n    } else {\r\n      cb(null, new SmbReadableStream(this, file, options))\r\n    }\r\n  })\r\n}\r\n"]}