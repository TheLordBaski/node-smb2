{"version":3,"sources":["src/createWriteStream.js"],"names":[],"mappings":"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","file":"createWriteStream.js","sourcesContent":["import Bigint from '../tools/bigint'\r\nimport Bluebird from 'bluebird'\r\nimport {request} from '../tools/smb2-forge'\r\nimport {Writable} from 'stream'\r\n\r\nimport {\r\n  FILE_OPEN,\r\n  FILE_OPEN_IF,\r\n  FILE_OVERWRITE_IF\r\n} from '../structures/constants'\r\n\r\nconst requestAsync = Bluebird.promisify(request)\r\n\r\nconst maxPacketSize = new Bigint(8, 0x00010000 - 0x71)\r\n\r\nfunction * fibonacci () {\r\n  let a = 1\r\n  let b = 2\r\n\r\n  for (;;) {\r\n    const c = a\r\n    a = b\r\n    b = c + a\r\n    yield c\r\n  }\r\n}\r\n\r\nclass SmbWritableStream extends Writable {\r\n  constructor (connection, file, options = {}) {\r\n    super(options)\r\n\r\n    const {\r\n      encoding = 'utf8',\r\n      start = 0\r\n    } = options\r\n\r\n    this.connection = connection\r\n    this.encoding = encoding\r\n    this.file = file\r\n    this.offset = new Bigint(8, start)\r\n  }\r\n\r\n  async _write (chunk, encoding, next) {\r\n    encoding = this.encoding || encoding\r\n    chunk = Buffer.isBuffer(chunk) ? chunk : new Buffer(chunk, encoding)\r\n\r\n    while (chunk.length > 0) {\r\n      const packetSize = Math.min(maxPacketSize.toNumber(), chunk.length)\r\n      const packet = chunk.slice(0, packetSize)\r\n      chunk = chunk.slice(packetSize)\r\n      const offset = new Bigint(this.offset)\r\n      this.offset = this.offset.add(packetSize)\r\n\r\n      const fiboGen = fibonacci()\r\n      let pending = true\r\n\r\n      while (pending) {\r\n        try {\r\n          await requestAsync('write', {\r\n            FileId: this.file.FileId,\r\n            Offset: offset.toBuffer(),\r\n            Buffer: packet\r\n          }, this.connection)\r\n\r\n          pending = false\r\n        } catch (error) {\r\n          if (error.code === 'STATUS_PENDING') {\r\n            await new Promise((resolve, reject) => {\r\n              setTimeout(resolve, fiboGen.next().value)\r\n            })\r\n          } else {\r\n            throw error\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    next()\r\n  }\r\n\r\n  async end (...args) {\r\n    try {\r\n      super.end(...args)\r\n    } finally {\r\n      await requestAsync('close', this.file, this.connection)\r\n    }\r\n  }\r\n}\r\n\r\nexport default function (path, options, cb) {\r\n  if (typeof options === 'function') {\r\n    cb = options\r\n    options = {}\r\n  }\r\n\r\n  let createDisposition\r\n  const flags = options && options.flags\r\n\r\n  if (flags === 'r') {\r\n    createDisposition = FILE_OPEN\r\n  } else if (flags === 'r+') {\r\n    createDisposition = FILE_OPEN_IF\r\n  } else if (flags === 'w' || flags === 'w+') {\r\n    createDisposition = FILE_OVERWRITE_IF\r\n  }\r\n\r\n  request('create', { path, createDisposition }, this, (err, file) => {\r\n    if (err) {\r\n      cb(err)\r\n    } else {\r\n      cb(null, new SmbWritableStream(this, file, options))\r\n    }\r\n  })\r\n}\r\n"]}